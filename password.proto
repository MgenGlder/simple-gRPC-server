syntax = "proto3"; // Must be the first, non-empty line. Specifies that we're using Proto3 syntax, otherwise we assume it is Proto2.
/*
* Adds a new PasswordDetails message with a set of KeyValue pairs. Each has a type and a name.
*/

enum Corpus {
    CORPUS_UNSPECIFIED = 0;
    CORPUS_UNIVERSAL = 1;
    CORPUS_WEB = 2;
    CORPUS_IMAGES = 3;
    CORPUS_LOCAL = 4;
}
message PasswordDetails {
    reserved 10, 11, 12;
    reserved "foo", "bar";
    // Each field must get a number from 1, and 536, 870, 911.
    // The given number *must be unique* among all fields or that message.bool
    // You cannot used previously reserved field numbers or any field numbers that have been allocated to extensions.
    string id = 1;
    string password = 2;
    string hashValue = 3;
    string saltValue = 4;
    Corpus corpus = 5;
    // Note: This number cannot be changed once your message is in use, because it identifies the field in the message wire format.
    // Lower field numbers take less space.
    // When deleting a field, you must reserve the field number.
}

/*
* If you want to use your message types with an RPC (Remote Procedure Call) system, you can define an RPC service
* interface in a .proto file and the protocol buffer compiler will generate service interface code and stubs in your
* chosen language. 
*/

// This is the service object that will be created in each language you specify when you run the protobuf command.enum
// Each `rpc` command describes a function that will live in the service.
service PasswordService {
    rpc RetrievePasswords(Empty) returns (PasswordList) {} // A method within the service that takes in nothing and returns a passwordList object
    rpc AddNewDetails(PasswordDetails) returns (PasswordDetails) {}
    rpc UpdatePasswordDetails(PasswordDetails) returns (PasswordDetails) {}
}
message Empty {}
message PasswordList {
    repeated PasswordDetails passwords = 1; // Protobufs way of registering a list object üëçüèæ.
}

/*
* The most straightforward RPC system to use with protocol buffers is gRPC: a language- and platform-neutral open source RPC system developed at Google.
* gRPC works particularly well with protocol buffers and lets you generate the relevant RPC code directly from your .proto files using a special protocol buffer compiler plugin.
*/ 

// TODO: Verify that this still works, because I don't think that it does... ?